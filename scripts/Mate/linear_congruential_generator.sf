#!/usr/bin/ruby

module LCG {

  # Creates a linear congruential generator with the self _seed_.
  class Common(r) {
    -> init {
      r = self.seed;
    }
  }

  # LCG::Berkeley generates 31-bit integers using the same formula
  # as BSD rand().
  class Berkeley(seed) < Common {
    -> rand {
      self.r = ((1103515245 * self.r + 12345) & 0x7fff_ffff);
    }
  }

  # LCG::Microsoft generates 15-bit integers using the same formula
  # as rand() from the Microsoft C Runtime.
  class Microsoft(seed) < Common {
    -> rand {
      self.r = ((214013 * self.r + 2531011) & 0x7fff_ffff);
      self.r >> 16;
    }
  }
}

var lcg1 = LCG::Berkeley.new(1);
say 5.of { lcg1.rand };

var lcg2 = LCG::Microsoft.new(1);
say 5.of { lcg2.rand };
