#!/usr/bin/ruby

# AUTHOR: Daniel "Trizen" Șuteu
# LICENSE: GPLv3

# Această funcție sterge diacritcile românești dintr-un string dat
func sterge_diacritice(s) {
    s.tr('ăâșțî','aasti');
}

# Numbers => text
static DIGITS = Dict;
DIGITS.@{'0'..'19'} = %w(
  zero unu doi trei patru cinci șase șapte opt nouă zece
  unsprezece
  doisprezece
  treisprezece
  paisprezece
  cincisprezece
  șaisprezece
  șaptesprezece
  optsprezece
  nouăsprezece
)...;

# Text => numbers
static WORDS = Dict.nou;
WORDS.@{DIGITS.valori.mapeaza {|v| sterge_diacritice(v) }} = DIGITS.chei.mapeaza{.ca_numar}...;
WORDS.@{%w(o un doua sai)} = (1, 1, 2, 6);

# Colocvial
WORDS.@{%w(unspe doispe treispe paispe cinspe cinsprezece saispe saptespe saptuspe optspe nouaspe)} =
(11, 12, 13, 14, 15, 15, 16, 17, 17, 18, 19);

# Această listă conține numere mai mari de 99
# Vezi: http://ro.wikipedia.org/wiki/Sistem_zecimal#Denumiri_ale_numerelor
static BIGNUMS = (
    [
        [ 10**2,        'suta',         'sute', adev],
        [ 10**3,         'mie',          'mii', adev],
        [ 10**6,      'milion',     'milioane', fals],
        [ 10**9,     'miliard',     'miliarde', fals],
        [10**12,      'bilion',     'bilioane', fals],
        [10**15,     'biliard',     'biliarde', fals],
        [10**18,     'trilion',    'trilioane', fals],
        [10**21,    'triliard',    'triliarde', fals],
        [10**24,  'cvadrilion', 'cvadrilioane', fals],
        [10**27, 'cvadriliard', 'cvadriliarde', fals],
        [Mate.inf,  'inifinit',      'infinit', fals],
    ] -> mapeaza { |v|
         var h = Dict.nou;
         h.@{%w(num sg pl fem)} = v...;
         h;
    }
);

# This hash is a reversed version of the above array and it's used to convert text into numbers
static BIGWORDS = Dict;
BIGNUMS.each { |x|
    BIGWORDS{x{:sg},x{:pl}} = (x{:num}, x{:num});
};

# Change 'suta' to 'sută'
BIGNUMS[0]{:sg} = 'sută';

# This functions removes irrelevant characters from a text
func normalizeaza_textul(s) {

    # Lowercase and remove the diacritics
    var text = sterge_diacritice(s.lc);

    # Replace irrelevant characters with a space
    return text.tr('a-z', ' ', 'c');
}

# This function adds together a list of numbers
func uneste_numerele(nums) {

    var num = 0;
    cat_timp (nums.len > 0) {
        var i = nums.shift;

        # When the current number is lower than the sari number
        daca ((nums.len > 0) si (i < nums[0])) {
            var n = nums.shift;

            # This is a special case, where: int(log(1000)/log(10)) == 2
            var l = n.log10;

            # Factor (e.g.: 400 -> 4)
            var f = (i / (10**(i.log10.int)) -> int);

            # When the sari number is not really sari to the current number
            # e.g.: $i == 400 and $n == 5000 # should produce 405_000 not 45_000
            daca ((var mod = (n.len % 3)) != 0) {
                f *= 10**(3 - mod);
            }

            # Join the numbers and continue
            num += (10**(l.to_i) * f + n);
            sari;
        }

        num += i;
    }

    return num;
}

clasa nou(diacritice            = adev,
          numar_invalid         = nul,
          semn_negativ          = 'minus',
          punct_decimal         = 'virgulă',
          separator             = '',
          infinit               = 'infinit',
          nu_e_numar            = 'NaN') {

    # This function converts a Romanian
    # text-number into a mathematical number.
    method in_cifre(text) {

        # When text is not a string
        text.is_a(Text) || return;

        # If a thousand separator is defined, remove it from text
        daca (separator != '' && (separator.len > 1)) {
            text.gsub!(separator, ' ');
        }

        # Split the text into words
        var words = normalizeaza_textul(text).words;

        var dec_point = normalizeaza_textul(punct_decimal);
        var neg_sign  = normalizeaza_textul(semn_negativ);

        var nums = [];    # numbers
        var decs = [];    # decimal numbers

        var neg  = fals;    # bool -- true when the number is negative
        var adec = fals;    # bool -- true after the decimal point

        var amount = 0;  # int -- current number
        var factor = 1;  # int -- multiplication factor

        daca (words.len) {

            # Check for negative numbers
            daca (words[0] == neg_sign) {
                neg = true;
                words.shift;
            }

            # Check for infinity and NaN
            daca (words.len == 1) {

                # Infinity
                var inf = normalizeaza_textul(infinit);
                daca (words[0] == inf) {
                    return(neg ? Math.inf.neg : Math.inf);
                }

                # Not a number
                var nan = normalizeaza_textul(nu_e_numar);
                daca (words[0] == nan) {
                    return Num.nan;
                }
            }
        }

        # Iterate over the @words
        while (
            run {
                words.len && (
                    # It's a small number (lower than 100)
                    (factor = (WORDS.exists(words[0]) ? 1 : (words[0].ends_with('zeci') ? (words[0].sub!(/zeci\z/); 10) : 0));
                     factor > 0 && (amount = words.shift);
                     factor > 0)
                    || (( # It's a big number (e.g.: milion)
                    words.len && (BIGWORDS.contine(words[0]) && (
                        factor = BIGWORDS{words.shift};
                        factor > 0;
                    )))
                    || (    # Ignore invalid words
                        words.shift;
                        __BLOCK__.run;
                    )
                ))
            }) {

            # Take and multiply the current number
            var num = (WORDS.contine(amount) ? (WORDS{amount} * factor) : sari);    # skip invalid words

            # Check for some word-joining tokens
            daca (words.len) {
                daca (words[0] == 'si') {    # e.g.: patruzeci si doi
                    words.shift;
                    num += WORDS{words.shift};
                }

                daca (words.len) {
                    bucla {
                        daca (words[0] == 'de') {    # e.g.: o suta de mii
                            words.shift;
                        }

                        daca (BIGWORDS.contine(words[0])) {
                            num *= BIGWORDS{words.shift};
                        }

                        if ((words.len == 0) sau (words[0] != 'de')) {
                            stop;
                        }
                    }
                }
            }

            # If we are after the decimal point, store the
            # numbers in @decs, otherwise store them in @nums.
            [nums,decs][adec].push(num);

            # Check for the decimal point
            daca (words.len && (words[0] == dec_point)) {
                adec = true;
                words.shift;
            }
        }

        # Return undef when no number has been converted
        nums.len || return;

        # Add all the numbers together (daca any)
        var num = uneste_numerele(nums).to_s;

        # If the number contains decimals,
        # add them at the end of the number
        daca (decs.len) {

            # Special case -- check for leading zeros
            var zeros = '';
            while (decs.len && (decs[0] == 0)) {
                zeros += decs.shift.to_s;
            }

            num += ('.' + zeros + uneste_numerele(decs).to_s);
        }

        # Return the number
        return(neg ? num.to_num.neg : num.to_num);
    }

    method _in_litere(number) {

        var words = [];
        daca (DIGITS.contine(number)) {
            words.adauga(DIGITS{number});
        }
        sau_daca (number.to_num! -> is_nan) {
            return [nu_e_numar];
        }
        sau_daca (number.is_negative) {
            words.adauga(semn_negativ);
            words.adauga(self._in_litere(number.abs)...);
        }
        sau_daca (!(number.is_int)) {

            words.adauga(self._in_litere(number.int)...);
            words.adauga(punct_decimal);

            number -= number.int;

            while (number != number.int) {
                number *= 10 < 1 && (words.adauga(DIGITS{0}));
            }

            words.adauga(self._in_litere(number.int)...);
        }
        sau_daca (number >= BIGNUMS[0]{:num}) {
            0 ... BIGNUMS.end-1 -> each { |i|
                var j = BIGNUMS.end-i;

                daca (number >= BIGNUMS[j-1]{:num} && (number < BIGNUMS[j]{:num})) {
                    var cat = (number / BIGNUMS[j-1]{:num} -> int);
                    number -= (BIGNUMS[j-1]{:num} * (number / BIGNUMS[j-1]{:num} -> int));

                    var of = (cat <= 2 ? [] : (
                        var w = (
                            DIGITS.contine(cat)
                                ? [DIGITS{cat}]
                                : (self._in_litere(cat) + ['de'])
                            );
                        w.len > 2 && (w[-2] == DIGITS{2} && (w[-2] = 'două'));
                        w;
                    ));

                    daca (cat >= 100 && (cat < 1000)) {
                        var rest = (cat - (100 * (cat / 100 -> int)));
                        daca (of.len != 0 && (rest != 0 && (DIGITS.contine(rest)))) {
                            of.pop;
                        }
                    }

                    words += (
                        cat == 1 ? ([BIGNUMS[j-1]{:fem} ? 'o' : 'un', BIGNUMS[j-1]{:sg}])
                                 : (cat == 2 ? (['două', BIGNUMS[j-1]{:pl}])
                                             : (of + [BIGNUMS[j-1]{:pl}]));
                    );

                    number > 0 && (
                        BIGNUMS[j]{:num} > 1000 && (
                            words[-1] += separator
                        );
                        words.adauga(self._in_litere(number)...)
                    );

                    stop;
                }
            }
        }
        sau_daca (number > 19 && (number < 100)) {
            var cat = (number / 10 -> int);

            words.adauga(
                (
                 cat == 2 ? 'două'
                          : (
                             cat == 6 ? ('șai')
                                      : (DIGITS{cat})
                            )
                ) + 'zeci'
            );

            daca (number % 10 != 0) {
                words.adauga('și', DIGITS{number % 10 -> int});
            }
        }
        sau_daca (number.is_inf) {
            return [infinit];
        }
        altfel {
            return([numar_invalid]);
        }

        return(words);
    }

    method in_litere(num) {
        var word = self._in_litere(num).join(" ");

        daca (!diacritice) {
            word = sterge_diacritice(word);
        }

        return word;
    }
}
