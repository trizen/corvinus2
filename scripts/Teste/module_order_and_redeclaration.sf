#!/usr/bin/ruby

#
## Module redeclaration
#
{
    module main { say "main module" };
    module A { say "a" };
    module B { say "b" };
    module C {
        say "c";
        func e {say "e"};
    };
    module D { say "after first C" };
    module C {
        say "C redeclared";
        func f {say "f"};
    };
    C::e();
    C::f();
}.capture.lines == [
    "after first C",
    "c",
    "C redeclared",
    "b",
    "a",
    "main module",
    "e",
    "f",
] || die "error";

#
## Redeclaring functions
#
{
    module Z {
        func f {say "x"};
    }

    module Z {
        f();
        f = func {say "y"};
        func g() {say "z"};
    };

    Z::f();
    Z::g();
}.capture.lines == <x y z> || "error-2".die;

#
## Module inside module
#
{
    module O {
        say "inO";
        module P {
            say "inP";
            func f{say "P::f()" };
        };
        say "afterP";
        P::f();
    };
    P::f();
}.capture.lines == [
    "inP",
    "inO",
    "afterP",
    "P::f()",
    "P::f()"
] || die "error-3";


#
## Changing module vars
#
module Test {
    var hello = 23;
}

module Test {
    hello += 1;
}

Test::hello == 24 || "Test::hello != 24".die;

#
## Test order of module execution
#
module Order {      #1
    var x = 23;
}

Order::x == 25      #3
    || "order-error".die;

module Order {      #2
    x += 2;
}

#
## Everything is OK!
#
say "** Test passed!";
