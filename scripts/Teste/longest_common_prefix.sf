#!/usr/bin/ruby

#
## http://rosettacode.org/wiki/Longest_common_prefix#Sidef
#

# Finds the first point where the tree bifurcates
func find_common_prefix(hash, acc) {
    if ((var keys = hash.keys).len == 1) {
        return __FUNC__(hash{keys[0]}, acc+keys[0]);
    };
    return acc;
}

# Creates a tree like: {a => {b => {c => {}}}}
func lcp(*strings) {
    var hash = Hash.new;

    strings.sort_by{ .len }.each { |str|
        var ref = hash;
        str == '' && return '';
        str.each { |char|
            if (ref.has_key(char)) {
                ref = ref{char};
                ref.keys.len == 0 && break;
            } else {
                ref = (ref{char} = Hash.new);
            }
        };
    };

    return find_common_prefix(hash, '');
};

func is(a, b) {
    a == b || die "error: #{a} != #{b}";
}

is(lcp("interspecies","interstellar","interstate"), "inters");
is(lcp("throne","throne"),                          "throne");
is(lcp("throne","dungeon"),                         "");
is(lcp("throne","","throne"),                       "");
is(lcp("cheese"),                                   "cheese");
is(lcp(""),                                         "");
is(lcp(),                                           "");
is(lcp("prefix","suffix"),                          "");
is(lcp("foo","foobar"),                             "foo");
is(lcp("foobar","foo"),                             "foo");

say "** Test passed!";
