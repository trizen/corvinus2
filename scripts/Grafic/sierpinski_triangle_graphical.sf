#!/usr/bin/ruby

# http://rosettacode.org/wiki/Sierpinski_triangle/Graphical#Sidef

func sierpinski_triangle(n) -> Array {
  var triangle = ['*'];
  { |i|
    var sp = (' ' * Math.pow(2, i-1));
    triangle = (triangle.map {|x| sp + x + sp} +
                triangle.map {|x| x + ' ' + x});
  } * n;
  triangle;
}

class Array {
  method to_png(scale=1, bgcolor='white', fgcolor='black') {

    var gd = (
      try   { require('GD::Simple') }
      catch { warn "GD::Simple is not installed!"; return };
    );

    var width = self.max_by{.len}.len;
    self.map!{|r| "%-#{width}s" % r};

    var img = gd.new(width * scale, self.len * scale);

    self.range.each { |i|
      range(i * scale, i * scale + scale).each { |j|
        var row = self[i];
        img.moveTo(0, j);
        loop {
          if (var sp = row.match(/^\s+/)) {
             row.substr!(sp.pos.last);
             img.fgcolor(bgcolor);
             img.line(scale * sp.pos.last);
          }
          elsif (var nsp = row.match(/^\S+/)) {
             row.substr!(nsp.pos.last);
             img.fgcolor(fgcolor);
             img.line(scale * nsp.pos.last);
          }
          else {
             break;
          }
        }
      }
    }

    return img.png;
  }
}

var triangle = sierpinski_triangle(6);
var raw_png = triangle.to_png(10, 'black', 'red');

var file = %f'triangle.png';
file.open('>:raw', \var fh);
fh.print(raw_png);
fh.close;
