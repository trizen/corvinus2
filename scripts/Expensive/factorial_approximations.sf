#!/usr/bin/ruby

define DPI   = 2*Math::PI;
define NAMES = %w(Unknown Ramanujan Trizen Stirling Stirling+Laplace Ramanujan2 Batir Batir2 Batir2WA);

# Unknown
func f1(n) {
    define w = ((3 - 3.sqrt) / 6);
    define d = (DPI * Math::e -> sqrt * Math.exp(-w));
    d * (Math.pow((n+w) / Math::e, n + 1/2));
}

# S. Ramanujan's formula
func f2(n) {
    define d = (Math::PI.log / 2);
    Math.exp(n * n.log - n + (n * (1 + (4*n * (1 + 2*n))) -> log / 6) + d);
}

# Trizen's formula
func f3(n) {
    n**n / n.exp * (Math::e / n.sqrt) / Math::e.root((12 + 1/n.root(Math::e + (1 / (n - ((n*2).log(n+1)))))) * Math::e.root(n));
}

# Stirling's formula
func f4(n) {
    DPI * n -> sqrt * Math.pow(n / Math::e, n);
}

# Stirling's formula + Laplace's method (1)
func f5(n) {
    DPI * n -> sqrt * Math.pow(n / Math::e, n) * (1 + 1/(12*n));
}

# S. Ramanujan (2)
func f6(n) {
    define w = (Math::PI.sqrt);
    w * Math.pow(n, n) * Math.exp(-n) * Math.pow(((8 * n**3) + (4 * n**2) + n + 1/30), 1/6);
}

# N. Batir
func f7(n) {
    define w = (DPI.sqrt);
    w * Math.pow(n, n) * Math.exp(-n) * (n + 1/2 -> sqrt) * Math.exp(-(1 / (6 * (n + 3/8))));
}

# N. Batir(2)
func f8(n) {
    define w = (DPI.sqrt);
    w * Math.pow(n, n) * Math::e**(-n) * (n + 1/6 + 1/(72*n) - 31/(6480 * n**2) - 139/(155520 * n**3) + 9871/(6531840 * n**4) -> sqrt);
}

# N. Batir(2) derivation by WolframAlpha
func f9(n) {
    1/216 * Math.sqrt(Math::PI/70) * Math::e**(-n) * n**(n-2) * Math.sqrt(42*n*(24*n*(90*n*(12*n*(6*n + 1) + 1) - 31) - 139) + 9871);
}

#
## TESTS
#

var report = Hash.new;
range(1, 10).each { |x|

    var xfact = x!;
    var arr = [f1(x), f2(x), f3(x+1), f4(x), f5(x), f6(x), f7(x), f8(x), f9(x)];

    NAMES.each { |name|
        report{name} := [] += arr.shift;
    };

    "\n%-22d%s\n".printf(x, xfact);
    NAMES.each { |name|
        "%20s: %s\n".printf(name, report{name}[-1]);
    };

    report{:REAL} \\= [];
    report{:REAL}.append(xfact);
}

func A(a) { a.sum / a.len };
func G(a) { a.prod.root(a.len) };
func H(a) { a.len / a.map{1/_}.sum };

var r1 = Hash.new;
var r2 = Hash.new;
var r3 = Hash.new;

NAMES.each {|name|
    var arr = report{name}.range.map {|i| report{:REAL}[i] - report{name}[i] -> abs};
    r1{name} = A(arr);
    r2{name} = G(arr);
    r3{name} = H(arr);
}

func print_report(h) {
    h.keys.sort {|a, b| h{a} <=> h{b}}.each {|key|
        "%20s: %s\n".printf(key, h{key});
    }
}

say ("\n", '-'*80);

say "\n=>> A <<=";
print_report(r1);

say "\n=>> G <<=";
print_report(r2)

say "\n=>> H <<=";
print_report(r3);

say ("\n", '-'*80);
