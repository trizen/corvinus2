#!/usr/bin/ruby

#`(if running under some shell) {
    eval 'exec /usr/bin/sidef $0 ${1+"$@"}'
}

# Author: Daniel "Trizen" È˜uteu
# License: GPLv3
# Date: 17 May 2014
# Latest edit on: 23 November 2015
# Website: https://github.com/trizen/smart-units

#
## Requires Sidef: https://github.com/trizen/sidef
#

define VERSION = 0.03;

func more_help {
    print <<"HELP";
Mass:
    42 kg to lbs        : convert kilograms to pounds
    30 t to grams       : convert tonnes to grams
    10 lbs to quintals  : convert pounds to quintals

Temperature:
    120 F to C          : convert fahrenheit to celsius
    -15 C to K          : convert celsius to kelvin
    420 K to F          : convert kelvin to fahrenheit

Length:
    21.1 in to cm       : convert inches to centimetres
    5.6 feet to m       : convert feet to meters
    4 light years to km : convert light years to km

Velocity:
    4444 mph to km/s        : convert miles per hour to km/s
    50 m/s to km/h          : convert meters per second to km/h
    speed of sound in mi/s  : convert the speed of sound in mi/s

Time:
    2 hours in sec      : convert hours to seconds
    3 years in mons     : convert years to mons
    4 days in hours     : convert days to hours

Information:
    one byte to bits    : convert bytes to bits
    32MB in KB          : convert megabytes in kilobytes
    3 TB in GB          : convert terabytes in gigabytes

...and more that are left for you to discover!
HELP

}

class Units(precision = 2) {
    static conversions = :(
        mass => :(  # all relative to 1 kilogram
            grams     => :(re => /^(?:grams?|gr)$/i,         factor => 1e-3),
            quintals  => :(re => /^(?:quintals?)$/i,         factor => 1e2),
            tonnes    => :(re => /^(?:tonn?es?|(?-i:t))$/i,  factor => 1e3),
            kilograms => :(re => /^(?:kg|kilograms?)$/i,     factor => 1),
            pounds    => :(re => /^(?:pounds?|lbs)$/i,       factor => 0.45359237),
        ),
        temperature => :(   # using Celsius as the standard
            celsius    => :(re => /^(?:celsius|(?-i:C))$/i,    code => {|n, _| n} ),
            kelvin     => :(re => /^(?:kelvin|(?-i:K))$/i,     code => {|n, to| to ? (n + 273.15) : (-273.15 + n)} ),
            fahrenheit => :(re => /^(?:fahrenheit|(?-i:F))$/i, code => {|n, to| to ? (32 + n*9/5) : ((n - 32) * 5/9)} ),
        ),
        time => :(  # all relative to 1 second
            nanoseconds  => :(re => /^(?:nanosec(?:ond)?s?|(?-i:ns))/i,       factor => 1e-9),
            microseconds => :(re => /^(?:microsec(?:ond)?s?|(?-i:us))/i,      factor => 1e-6),
            milliseconds => :(re => /^(?:mill?isec(?:ond)?s?|(?-i:ms))$/i,    factor => 1e-3),
            seconds      => :(re => /^(?:sec(?:ond)?s?|(?-i:s))$/i,           factor => 1),
            minutes      => :(re => /^(?:min(?:ute)?s?)$/i,                   factor => 60),
            moments      => :(re => /^(?:mom(?:ent)?s?)$/i,                   factor => 90),
            hours        => :(re => /^(?:hours?)$/i,                          factor => 3600),
            days         => :(re => /^(?:days?)$/i,                           factor => 86400),
            millidays    => :(re => /^(?:millidays?|(?-i:md))$/i,             factor => 86.4),
            weeks        => :(re => /^(?:weeks?)$/i,                          factor => 604800),
            months       => :(re => /^(?:mon(?:th)?s?)$/i,                    factor => 2629743.83),
            years        => :(re => /^(?:years?)$/i,                          factor => 31556952),
        ),
        velocity    => :( # all relative to 1 meter / second
            meters_per_second     => :(re => /^(?:m(?:et(?:er|re)s?)?\/s(?:ec)?|m(?:et(?:er|re)s?)?\s+per\s+sec(?:ond)?)$/i,      factor => 1),
            miles_per_hour        => :(re => /^(?:mph|mi(?:les?)?\/h|mi(?:les?)?\s+per\s+hour)$/i,                                factor => 0.44704),
            miles_per_minute      => :(re => /^(?:mpm|mi(?:les?)?\/min|mi(?:les?)?\s+per\s+min(?:ute)?)$/i,                       factor => 26.8224),
            miles_per_second      => :(re => /^(?:mps|mi(?:les?)?\/s(?:ec)?|mi(?:les?)?\s+per\s+sec(?:ond)?)$/i,                  factor => 1609.344),
            kilometers_per_hour   => :(re => /^(?:kph|km[\/p]h|(?:kilomet(?:er|re)s|km)\s+per\s+hour)$/i,                         factor => 1 / 3.6),
            metres_per_hour       => :(re => /^(?:m(?:eters?)?\/h|(?:metres?|m)\s+per\s+hour)$/i,                                 factor => 1 / 3600),
            kilometers_per_second => :(re => /^(?:kph|km\/s(?:ec)?|(?:kilomet(?:er|re)s|km)\s+per\s+sec(?:ond)?)$/i,              factor => 1e3),
            speed_of_light        => :(re => /^(?:speed\s+of\s+light|(?-i:c))$/i,                                                 factor => 299792458),
            speed_of_sound        => :(re => /^(?:speed\s+of\s+sound)$/i,                                                         factor => 340.29),
        ),
        length      => :(   # all relative to 1 meter
            kilometers       => :(re => /^(?:kilomet(?:er|re)s?|km)$/i,       factor => 1e3),
            meters           => :(re => /^(?:met(?:er|re)s?|(?-i:m))$/i,      factor => 1),
            centimetres      => :(re => /^(?:centimet(?:er|re)s?|cm)$/i,      factor => 1e-2),
            millimetres      => :(re => /^(?:millimet(?:er|re)s?|mm)$/i,      factor => 1e-3),
            micrometres      => :(re => /^(?:micromet(?:er|re)s?|um)$/i,      factor => 1e-6),
            nanometres       => :(re => /^(?:nanomet(?:er|re)s?|nm)$/i,       factor => 1e-9),
            picometres       => :(re => /^(?:picomet(?:er|re)s?|pm)$/i,       factor => 1e-12),
            femtometres      => :(re => /^(?:femtomet(?:er|re)s?|fm)$/i,      factor => 1e-15),
            feet             => :(re => /^(?:feet|ft|foot)$/i,                factor => 0.304799735),
            inches           => :(re => /^(?:inch(?:es)?|in|")$/i,            factor => 0.0254),
            miles            => :(re => /^(?:miles?|mi)$/i,                   factor => 1609.344),
            yards            => :(re => /^(?:yards?|yd)$/i,                   factor => 0.9144),
            astronomic_units => :(re => /^(?:astronomic[-\s]*units?|AU)$/i,   factor => 149597870700),
            light_seconds    => :(re => /^(?:light[-\s]*sec(?:ond)?s?|ls)$/i, factor => 299792458),
            light_minutes    => :(re => /^(?:light[-\s]*min(?:ute)?s?|lm)$/i, factor => 1.798754748e10),
            light_hours      => :(re => /^(?:light[-\s]*hours?|lh)$/i,        factor => 1.0792528488e12),
            light_days       => :(re => /^(?:light[-\s]*days?|ld)$/i,         factor => 2.59020683712e13),
            light_years      => :(re => /^(?:light[-\s]*years?|LY)$/i,        factor => 9.4607304725808e15),
        ),
        information   => :( # all relative to 1 byte
            bits           => :(re => /^(?:bits?)$/i,            factor => 1 / 8),
            bytes          => :(re => /^(?:bytes?)$/i,           factor => 1),
            kilobytes      => :(re => /^(?:kilobytes?|ki?b)$/i,  factor => 1024 ** 1),
            megabytes      => :(re => /^(?:megabytes?|mi?b)$/i,  factor => 1024 ** 2),
            gigabytes      => :(re => /^(?:gigabytes?|gi?b)$/i,  factor => 1024 ** 3),
            terabytes      => :(re => /^(?:terabytes?|ti?b)$/i,  factor => 1024 ** 4),
            petabytes      => :(re => /^(?:petabytes?|pi?b)$/i,  factor => 1024 ** 5),
            exabytes       => :(re => /^(?:exabytes?|ei?b)$/i,   factor => 1024 ** 6),
            zettabytes     => :(re => /^(?:zettabytes?|zi?b)$/i, factor => 1024 ** 7),
            yottabytes     => :(re => /^(?:yottabytes?|yi?b)$/i, factor => 1024 ** 8),
        ),
    );

    method convert(amount, from, to) {
        conversions.each { |category, value|
            value.each { |from_unit, from_data|
                if (from.match(from_data{:re})) {
                    value.each{ |_, to_data|
                        if (to.match(to_data{:re})) {
                            var new_amount = 0;
                            if (category == :temperature) {
                                var std_from = from_data{:code}(amount, false);
                                new_amount   = to_data{:code}(std_from, true);
                            } else {
                                new_amount = (amount / to_data{:factor} * from_data{:factor});
                            }
                            say (new_amount.is_int ? new_amount : new_amount.roundf(-precision));
                            return true;
                        }
                    }
                    STDERR.say("#{category}: I don't know how to convert #{from_unit.gsub('_', ' ')} to #{to}...");
                    return false;
                }
            }
        }

        STDERR.say("I don't know how to convert #{from} to #{to}... Is even '#{from}' a real unit?");
        return false;
    }
}

var precision = 2;
var interactive = false;

func help {
    print <<"USAGE";
usage: #{File.new(__FILE__).basename} [text]

options:
    -p int : set floating point precision (default: #{precision})
    -i     : start in interactive mode (default: #{interactive})

examples:
    144 F to C
    convert 10kg into pounds
    whats the equivalent of 21 inches in meters
    what is the speed of light in miles per hour
USAGE
    Sys.exit(0);
}

var cmd = [];
while (!ARGV.is_empty) {
    given (var arg = ARGV.shift) {
        when ('-p') {
            precision = Num(ARGV.shift);
        }
        when ('-i') {
            interactive = true;
        }
        when ('-h') {
            help();
        }
        default {
            cmd << arg;
        }
    }
}

var units = Units(precision);

func main(command) {
    var match = command.match(/^

        # command or question
        (?:(?:convert|how\s+much\s+is|what(?:\s+is|\W*s)(?:\s+the)?(?:\s+equivalent\s+of)?)\s+)?

        # followed by a number or 'a' word or nothing
        ([-+]?\d+(?:\.\d+)?|(?:an?|one)(?=\s)|)

        # unit from (up to 3 words)
        \s*(\S+(?:\s+\S+){0,2})

        # 'to' token
        \s+(?:in|to|into)\s+

        # unit to (up to 3 words)
        (\S+(?:\s+\S+){0,2})
    $/ix);

    if (match) {
        var (amount, from, to) = match.captures...;

        if (amount ~~ ['a','an','one','']) {
            amount = 1;
        } else {
            amount.to_f!;
        }

        return units.convert(amount, from, to);
    }
    else {
        more_help();
    }

    return false;
}

if (interactive) {
    print <<"EOT";
Welcome to smart-units #{VERSION} in interactive mode.
EOT
    loop {
        var line = read(">> ", String) \\ break;
        main(line)
    }
}
else {
    Sys.exit((cmd.is_empty ? help() : main(cmd.join(' '))) ? 0 : 1);
}
