#!/usr/bin/ruby

#
## http://rosettacode.org/wiki/Set#Sidef
#

clasa Set(*set) {

    metoda init {
        var elems = set;
        set = Dict.nou;
        elems.fiecare { |e| self += e }
    }

    metoda +(elem) {
        set{elem} = elem;
        self;
    }

    metoda inlatura(elem) {
        set.delete(elem);
    }

    metoda contine(elem) {
        set.has_key(elem);
    }

    metoda ∪(Set that) {
        Set(set.values..., that.values...);
    }

    metoda ∩(Set that) {
        Set(set.keys.filtreaza{ |k| k ∈ that }
                    .mapeaza  { |k| set{k} }...);
    }

    metoda ∖(Set that) {
        Set(set.keys.filtreaza{|k| !(k ∈ that) }
                    .mapeaza  {|k| set{k} }...);
    }

    metoda ^(Set that) {
        var d = ((self ∖ that) ∪ (that ∖ self));
        Set(d.values...);
    }

    metoda count { set.len }

    metoda ≡(Set that) {
        (self ∖ that -> count.is_zero) && (that ∖ self -> count.is_zero);
    }

    metoda values { set.values }

    metoda ⊆(Set that) {
        that.set.keys.fiecare { |k|
            k ∈ self || return fals;
        }
        return adev;
    }

    metoda to_s {
        "Set{" + set.values.mapeaza{|e| "#{e}"}.sort.join(', ') + "}"
    }
}

clasa Obiect {
    metoda ∈(Set set) {
        set.contine(self);
    }
}

#
## Testing
#

var x = Set(1, 2, 3);
5..7 -> fiecare { |i| x += i };

var y = Set(1, 2, 4, x);

spune "set x is: #{x}";
spune "set y is: #{y}";

[1,2,3,4,x].fiecare { |elem|
    spune ("#{elem} is ", elem ∈ y ? '' : 'not', " in y");
}

var (w, z);
spune ("union: ", x ∪ y);
spune ("intersect: ", x ∩ y);
spune ("z = x ∖ y = ", z = (x ∖ y) );
spune ("y is ", x ⊆ y ? "" : "not ", "a subset of x");
spune ("z is ", x ⊆ z ? "" : "not ", "a subset of x");
spune ("z = (x ∪ y) ∖ (x ∩ y) = ", z = ((x ∪ y) ∖ (x ∩ y)));
spune ("w = x ^ y = ", w = (x ^ y));
spune ("w is ", w ≡ z ? "" : "not ", "equal to z");
spune ("w is ", w ≡ x ? "" : "not ", "equal to x");
