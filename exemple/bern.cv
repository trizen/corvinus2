#!/usr/bin/ruby

# Recursive computation of Bernoulli numbers.

func bernoulli_number{};    # trebuie declarată înaite de prima folosire

func binomial(n, k) e memorat {
    (k == 0) || (n == k) ? 1 : (binomial(n - 1, k - 1) + binomial(n - 1, k));
}

func bern_helper(n, k) {
    (bernoulli_number(k) // (n - k + 1)) * binomial(n, k);
}

func bern_diff(n, k, d) {
    n < k ? d : bern_diff(n, k + 1, d.rat - bern_helper(n + 1, k));
}

bernoulli_number = func(n) e memorat {

    n.e_unu   && return 1//2;
    n.e_impar && return 0//1;

    n > 0 ? bern_diff(n - 1, 0, 1) : 1//1;
}

SirNum(0, 30).each { |i|
    var num = bernoulli_number(i) || next;
    scrief("B(%2d) = %20s / %s\n", i, num.parts);
}
